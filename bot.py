# bot.py
import os
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import database

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
API_URL = os.getenv('API_URL', 'http://localhost:8000/api/expense')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = database.get_user_by_telegram_id(user_id)
    
    if not user:
        await update.message.reply_text(
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.",
            parse_mode='HTML'
        )
        return
    
    await update.message.reply_text(
        f"üí∞ <b>–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ç—Ä–∞—Ç</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {user['name']}!\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ <code>150 –∫–æ—Ñ–µ</code>\n"
        "‚Ä¢ <code>300 –æ–±–µ–¥</code>\n" 
        "‚Ä¢ <code>500 —Ç–∞–∫—Å–∏</code>\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/categories - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/myid - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–π ID",
        parse_mode='HTML'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "üìù <b>–§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:</b>\n\n"
        "‚Ä¢ <code>150 –∫–æ—Ñ–µ</code> - –¥–æ–±–∞–≤–∏—Ç —Ç—Ä–∞—Ç—É 150 —Ä—É–±\n"
        "‚Ä¢ <code>500 —Ç–∞–∫—Å–∏ —Ä–∞–±–æ—Ç–∞</code> - –¥–æ–±–∞–≤–∏—Ç —Ç—Ä–∞—Ç—É 500 —Ä—É–±\n\n"
        "üí° –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        parse_mode='HTML'
    )

async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories"""
    categories_text = (
        "üìÇ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n"
        "‚Ä¢ üçï <b>–ï–¥–∞</b> - –∫–æ—Ñ–µ, –æ–±–µ–¥, —É–∂–∏–Ω, –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "‚Ä¢ üöó <b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</b> - —Ç–∞–∫—Å–∏, –º–µ—Ç—Ä–æ, –±–µ–Ω–∑–∏–Ω\n" 
        "‚Ä¢ üé¨ <b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</b> - –∫–∏–Ω–æ, –∫–æ–Ω—Ü–µ—Ä—Ç\n"
        "‚Ä¢ üè† <b>–î–æ–º</b> - –∫–æ–º–º—É–Ω–∞–ª–∫–∞, —Ä–µ–º–æ–Ω—Ç\n"
        "‚Ä¢ üëï <b>–û–¥–µ–∂–¥–∞</b> - –æ–¥–µ–∂–¥–∞, –æ–±—É–≤—å\n"
        "‚Ä¢ üíä <b>–ó–¥–æ—Ä–æ–≤—å–µ</b> - –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –≤—Ä–∞—á\n"
        "‚Ä¢ ‚ùì <b>–ü—Ä–æ—á–µ–µ</b> - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ"
    )
    await update.message.reply_text(categories_text, parse_mode='HTML')

async def myid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ Telegram ID"""
    user = update.effective_user
    await update.message.reply_text(
        f"üÜî <b>–í–∞—à Telegram ID:</b> <code>{user.id}</code>\n\n"
        f"üë§ <b>–ò–º—è:</b> {user.first_name}\n"
        f"üìõ <b>Username:</b> @{user.username if user.username else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
        f"üí° <i>–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É</i>",
        parse_mode='HTML'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = database.get_user_by_telegram_id(user_id)
    if not user:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    text = update.message.text
    if text.startswith('/'):
        return
    
    try:
        parts = text.split(' ', 1)
        if len(parts) < 2:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 150 –∫–æ—Ñ–µ")
            return
        
        amount = float(parts[0])
        description = parts[1].strip()
        category = categorize_expense(description)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API —Å API –∫–ª—é—á–æ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        headers = {"X-API-Key": user['api_key']}
        response = requests.post(
            API_URL, 
            json={
                "amount": amount,
                "category": category,
                "description": description
            },
            headers=headers
        )
        
        if response.status_code == 200:
            await update.message.reply_text(
                f"‚úÖ <b>–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üíµ <b>{amount} —Ä—É–±</b>\n"
                f"üìÅ <b>{category}</b>\n" 
                f"üìù <i>{description}</i>",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
            
    except ValueError:
        await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def categorize_expense(description):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
    description_lower = description.lower()
    
    categories = {
        '–ï–¥–∞': ['–∫–æ—Ñ–µ', '–æ–±–µ–¥', '—É–∂–∏–Ω', '–∑–∞–≤—Ç—Ä–∞–∫', '–µ–¥–∞', '–ø—Ä–æ–¥—É–∫—Ç—ã', '—Å—Ç–æ–ª–æ–≤–∞—è', '–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω'],
        '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['—Ç–∞–∫—Å–∏', '–º–µ—Ç—Ä–æ', '–∞–≤—Ç–æ–±—É—Å', '—Ç—Ä–∞–º–≤–∞–π', '–±–µ–Ω–∑–∏–Ω', '–∑–∞–ø—Ä–∞–≤–∫–∞'],
        '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['–∫–∏–Ω–æ', '–∫–æ–Ω—Ü–µ—Ä—Ç', '—Ç–µ–∞—Ç—Ä', '–∫–ª—É–±', '–±–∞—Ä'],
        '–î–æ–º': ['–∫–æ–º–º—É–Ω–∞–ª–∫–∞', '–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '–≤–æ–¥–∞', '—Ä–µ–º–æ–Ω—Ç'],
        '–û–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥–∞', '–æ–±—É–≤—å', '–∫—É—Ä—Ç–∫–∞', '—Ñ—É—Ç–±–æ–ª–∫–∞'],
        '–ó–¥–æ—Ä–æ–≤—å–µ': ['–∞–ø—Ç–µ–∫–∞', '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–≤—Ä–∞—á', '–±–æ–ª—å–Ω–∏—Ü–∞'],
        '–ü—Ä–æ—á–µ–µ': []
    }
    
    for category, keywords in categories.items():
        if any(keyword in description_lower for keyword in keywords):
            return category
    return '–ü—Ä–æ—á–µ–µ'

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == 'your_telegram_bot_token_here':
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("categories", categories_command))
    application.add_handler(CommandHandler("myid", myid_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    application.run_polling()

if __name__ == "__main__":
    main()